// callback function

const dummyData = require("./../fajriawan/dummyData");
const film = dummyData.greatMovies;

//notes: sebenernya, bebas. yang penting output returnnya ditulis di dalam callback function

//1. buat function dengan 2 parameters contoh myFunction(directorName, cbFunction),
// buat callback function contoh myCallback(cbData) akan mereturn film-film yang didirect oleh
// directorName pada function myFunction(directorName, cbFunction)
//contoh: jika myFunction("Raditya Dika", myCallback), myCallback() akan memiliki return ["Hangout", "Kambing Jantan", "The Boys"]

const filterByDirector = (dirName, cbFunc) => {
  cbFunc(dirName, [...dummyData.greatMovies]);
};

const cbFilterDirector = (dirName, data, ngapain) => {
  if (ngapain == "nama_doang") {
    let output = [...data]
      .filter((v) => v.director === dirName)
      .map((el) => el.title);
    return console.log(output);
  } else if (ngapain == "tahun_doang") {
    let output = [...data]
      .filter((v) => v.director === dirName)
      .map((el) => el.year);
    return console.log(output);
  }
};

//filterByDirector("Frank Darabont", (a,b) => cbFilterDirector(a,b, "tahun_doang"));

//2. buat function 1 parameters sebagai callback contoh myFunction(cbFunction),
//  buat callback function contoh myCallback(cbData) dimana mereturn string film genre terbanyak
// cbData adalah arguments berupa object, contoh: {Action: 3, Drama: 2, Crime: 1, Thriller: 4}
// notes: banyaknya properties object bergantung pada banyaknya jenis genre yang ada
const totalFilm = (cbFunc) => {
  console.log(cbFunc);
};

const cbTotalFilm = (filmGenre) => {
  let output = {};
  [...film].forEach((val, index) => {
    val.genre.forEach((genreType) => {
      if (output.hasOwnProperty(genreType)) {
        output[genreType]++;
      } else {
        output[genreType] = 1;
      }
    });
  });
  filmGenre(output);
};
cbTotalFilm(totalFilm);

//3. buat function 1 parameters sebagai callback contoh myFunction(cbFunction),
//  buat callback function dengan 1 parameters contoh myCallback(name) dimana mereturn jumlah film berdasarkan genre
// myCallback akan memiliki return dalam bentuk string dengan kondisi:
// jika yang terbanyak adalah film action akan mereturn string "Aku suka list rekomendasimmu"
// jika yang terbanyak adalah film drama akan mereturn string "Aku tidak suka list rekomendasimu"
// jika yang terbanyak adalah film thriller akan mereturn string "Jangan rekomendasikan film kesukaanmu saja"
// jika yang terbanyak adalah film fantasy akan mereturn string "Apakah filmnya bagus? kadang fantasy tidak masuk akal buatku"
// jika yang terbanyak adalah selain 4 genre di atas akan mereturn "Hmm, akan aku catat dulu"

const mostGenre = (nextFunction) => {
  let output = {};
  [...film].forEach((val, index) => {
    val.genre.forEach((genreType) => {
      if (output.hasOwnProperty(genreType)) {
        output[genreType]++;
      } else {
        output[genreType] = 1;
      }
    });
  });
  let sortFilm = [];
  for (let genreType in output) {
    sortFilm.push([genreType, output[genreType]]);
  }

  const sortData = sortFilm.sort((a, b) => {
    return b[1] - a[1];
  });
  nextFunction(sortData[0][0])
};

const stringGenre = (terima) => {
    let kalimat = ""

    if (terima == "Action") {
        kalimat = "Aku suka list rekomendasimmu"
    }else if (terima == "Drama") {
        kalimat = "Aku tidak suka list rekomendasimu"
    }else if (terima == "Thriller") {
        kalimat = "Jangan rekomendasikan film kesukaanmu saja"
    }else if (terima == "Fantasy") {
        kalimat = "Apakah filmnya bagus? kadang fantasy tidak masuk akal buatku"
    } else {
        kalimat = "Hmm, akan aku catat dulu"
    }
    console.log(kalimat)
}
mostGenre(stringGenre)
